from django.contrib.auth.models import User
from django.core.validators import MinValueValidator
from django.db import models
from phonenumber_field.modelfields import PhoneNumberField
import uuid

from rest_framework.exceptions import ValidationError


class Agency(models.Model):
    """
    Represents a real estate agency
    """
    name = models.CharField(max_length=50, unique=True)
    address = models.TextField(unique=True)
    phone = PhoneNumberField()

    @staticmethod
    def has_read_permission(request):
        """
        Allow anyone to list the objects
        """
        return True

    @staticmethod
    def has_write_permission(request):
        """
        allow admin users to create new agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_write_permission(request):
        """
        allow admin users to delete agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_update_permission(request):
        """
        allow admin users to update agency information
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_read_permission(request):
        """
        allow anyone to read the specific object
        """
        return True


class MLSNumber(models.Model):
    """
    A realtor's MLS Number
    """
    number = models.CharField(max_length=12, unique=True, blank=True)
    agency = models.ForeignKey(Agency, on_delete=models.CASCADE)
    user = models.ForeignKey(User, related_name='mls_number', on_delete=models.CASCADE, null=True)

    def __unicode__(self):
        return '{}'.format(self.number)

    def __str__(self):
        return '****'

    def _generate_number(self):
        """
        Generate a unique MLS number for a realtor

        MLS numbers are generated by creating a unique UUID v4 object
        and taking the "node" section (last 6 bytes).

        :return: a string ID, unique across cls.number
        """
        mls = uuid.uuid4()

        while self.__class__.objects.filter(number=mls.fields[-1]).exists():
            mls = uuid.uuid4()

        self.number = mls.fields[-1]

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not self.pk:
            self._generate_number()

        super().save(force_insert=force_insert, force_update=force_update, using=using, update_fields=update_fields)


class Realtor(models.Model):
    """
    A Realtor's User Profile

    TODO: Make this work with the django user implementation
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    mls = models.OneToOneField(MLSNumber, on_delete=models.CASCADE)


class NearbyAttraction(models.Model):
    """
    A superclass for all the things near a property
    """
    NEARBY_ATTRACTION_TYPES = (
        ('SCHOOL_ELEM', 'Public Elementary School'),
        ('SCHOOL_MIDDLE', 'Public Middle School'),
        ('SCHOOL_HIGH', 'Public High School'),
        ('SCHOOL_PRIVATE', 'Private School'),
        ('SHOPPING', 'Shopping Area'),
        ('NEIGHBORHOOD', 'Neighborhood'),
        ('ENTERTAINMENT', 'Entertainment Area'),
    )

    name = models.CharField(max_length=50, unique=True)
    type = models.CharField(max_length=15, choices=NEARBY_ATTRACTION_TYPES)

    @staticmethod
    def has_read_permission(request):
        """
        Allow anyone to list the objects
        """
        return True

    @staticmethod
    def has_write_permission(request):
        """
        allow admin users to create new agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_write_permission(request):
        """
        allow admin users to delete agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_update_permission(request):
        """
        allow admin users to update agency information
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_read_permission(request):
        """
        allow anyone to read the specific object
        """
        return True


class Property(models.Model):
    """
    A property model
    """
    PROPERTY_TYPES = (
        ('APARTMENT', 'Apartment'),
        ('CONDO', 'Condominium'),
        ('DUPLEX', 'Duplex Home'),
        ('HOUSE', 'Standalone House')
    )

    address = models.TextField(unique=True)
    square_footage = models.IntegerField(validators=[MinValueValidator(0)])
    description = models.TextField(unique=True)
    type = models.CharField(max_length=12, choices=PROPERTY_TYPES)

    @staticmethod
    def has_read_permission(request):
        """
        Allow anyone to list the objects
        """
        return True

    @staticmethod
    def has_write_permission(request):
        """
        allow admin users to create new agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_write_permission(request):
        """
        allow admin users to delete agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_update_permission(request):
        """
        allow admin users to update agency information
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_read_permission(request):
        """
        allow anyone to read the specific object
        """
        return True


class NearbyAttractionPropertyConnector(models.Model):
    """
    Connect properties to nearby schools
    """
    attraction = models.ForeignKey(NearbyAttraction, on_delete=models.CASCADE)
    property = models.ForeignKey(Property, on_delete=models.CASCADE)

    class Meta:
        unique_together = (('attraction', 'property'),)

    def save(self, *args, **kwargs):
        errors = []

        if len(self.property.nearbyattractionpropertyconnector_set.filter(type='SCHOOL_ELEM').all()):
            errors.append('The property already has a Public Elementary School listed')

        if len(self.property.nearbyattractionpropertyconnector_set.filter(type='SCHOOL_MIDDLE').all()):
            errors.append('The property already has a Public Middle School listed')

        if len(self.property.nearbyattractionpropertyconnector_set.filter(type='SCHOOL_HIGH').all()):
            errors.append('The property already has a Public High School listed')

        if len(errors) is not 0:
            raise ValidationError({'property': errors})

        super().save(*args, **kwargs)


    @staticmethod
    def has_read_permission(request):
        """
        Allow anyone to list the objects
        """
        return True

    @staticmethod
    def has_write_permission(request):
        """
        allow admin users to create new agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_write_permission(request):
        """
        allow admin users to delete agencies
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_update_permission(request):
        """
        allow admin users to update agency information
        """
        return request.user.groups.filter(name='admins').exists()

    @staticmethod
    def has_object_read_permission(request):
        """
        allow anyone to read the specific object
        """
        return True


class Listing(models.Model):
    """
    A listing of a house
    """
    asking_price = models.IntegerField(validators=[MinValueValidator(0)])
